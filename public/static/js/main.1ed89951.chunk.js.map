{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["GET_BOOKS_QUERY","gql","_templateObject","GET_AUTHOR_QUERY","_templateObject2","ADD_BOOK_MUTATION","_templateObject3","GET_BOOK_QUERY","_templateObject4","BookDetails","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","id","props","bookId","react_default","a","createElement","react_apollo_browser_umd","query","variables","skip","_ref","loading","error","data","console","log","book","react","name","genre","author","className","books","map","e","Component","BookList","_this","call","state","selected","_this2","onClick","setState","components_BookDetails","AddBook","authorId","mutation","addBook","onSubmit","preventDefault","refetchQueries","type","onChange","target","_ref2","authors","client","ApolloClient","uri","App","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1ed89951.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nconst GET_BOOKS_QUERY = gql`\r\n  query BooksQuery{\r\n    books{\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_AUTHOR_QUERY = gql`\r\n  query AuthorsQuery{\r\n    authors{\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_BOOK_MUTATION = gql`\r\n  mutation AddBookMutation($name: String!, $genre:String!, $authorId:ID!){\r\n      addBook(name:$name,genre:$genre,authorId:$authorId){\r\n          name\r\n          id\r\n      }\r\n  }\r\n`;\r\n\r\nconst GET_BOOK_QUERY = gql`\r\n  query GetBookQuery($id: ID){\r\n      book(id:$id){\r\n          id\r\n          name\r\n          genre\r\n          author{\r\n              id\r\n              name\r\n              age\r\n              books{\r\n                  name\r\n                  id\r\n              }\r\n          }\r\n      }\r\n  }\r\n`;\r\n\r\nexport {GET_BOOKS_QUERY, GET_AUTHOR_QUERY, ADD_BOOK_MUTATION, GET_BOOK_QUERY}","import React, { Component, Fragment } from 'react';\r\nimport {GET_BOOK_QUERY} from '../queries/queries';\r\nimport {Query} from 'react-apollo';\r\n\r\nexport class BookDetails extends Component {\r\n  render() {\r\n    let id = this.props.bookId;\r\n    if (id) {\r\n        return (\r\n            <div id=\"book-details\">\r\n              <Query query={GET_BOOK_QUERY} variables={{id}} skip={!id}>\r\n                  {\r\n                      ({loading, error, data}) => {\r\n                          if (loading) return <div>Loading book details...</div>\r\n                          if (error) console.log(error);\r\n                              const {book} = data;\r\n                              return<Fragment>\r\n                                  <h2>{book.name}</h2>\r\n                                  <p>{book.genre}</p>\r\n                                  <p>{book.author.name}</p>\r\n                                  <p>All books by this author:</p>\r\n                                  <ul className=\"other-books\">\r\n                                      {book.author.books.map(e => {\r\n                                          return <li key={e.id}>{e.name}</li>\r\n                                      })}\r\n                                  </ul>\r\n                              </Fragment>\r\n                      }\r\n                  }\r\n              </Query>\r\n            </div>\r\n          )\r\n        } else {\r\n            return(\r\n                <h2>No book selected...</h2>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default BookDetails\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { GET_BOOKS_QUERY } from '../queries/queries';\r\nimport BookDetails from './BookDetails';\r\n\r\nexport class BookList extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      selected: null\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Query query={GET_BOOKS_QUERY}>\r\n          {\r\n            ({loading, error, data}) => {\r\n              if (loading) return <div>Loading books...</div>\r\n              if (error) console.log(error);\r\n              return<Fragment>\r\n                <ul id=\"book-list\">\r\n                {\r\n                  data.books.map(book => <li key={book.id} onClick={e => {this.setState({selected:book.id})}}>{book.name}</li>)\r\n                }\r\n                </ul>\r\n                <BookDetails bookId={this.state.selected}/>\r\n              </Fragment>\r\n            }\r\n          }\r\n        </Query>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BookList\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Query, Mutation } from 'react-apollo';\r\nimport { GET_AUTHOR_QUERY, ADD_BOOK_MUTATION, GET_BOOKS_QUERY } from '../queries/queries';\r\n\r\nexport class AddBook extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name:'',\r\n      genre:'',\r\n      authorId:''\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Mutation mutation={ADD_BOOK_MUTATION}>\r\n        {\r\n          (addBook,{data}) => (\r\n          <form id=\"add-book\" onSubmit={e => {\r\n            e.preventDefault();\r\n            addBook({\r\n              variables:{\r\n                name: this.state.name,\r\n                genre: this.state.genre,\r\n                authorId: this.state.authorId\r\n              },\r\n              refetchQueries:[{ query:GET_BOOKS_QUERY }]\r\n            });\r\n          }}>\r\n            <div className=\"field\">\r\n              <label>Book name:</label>\r\n              <input type=\"text\" onChange={e => this.setState({name: e.target.value})} />\r\n            </div>\r\n            <div className=\"field\">\r\n              <label>Genre:</label>\r\n              <input type=\"text\" onChange={e => this.setState({genre: e.target.value})} />\r\n            </div>\r\n            <div className=\"field\">\r\n              <label>Author:</label>\r\n              <select onChange={e => this.setState({authorId: e.target.value})}>\r\n                <option>Select author</option>\r\n                <Query query={GET_AUTHOR_QUERY}>\r\n                  {\r\n                    ({loading, error, data}) => {\r\n                      if (loading) return <option>Loading authors...</option>\r\n                      if (error) console.log(error);\r\n\r\n                      return<Fragment>\r\n                        {\r\n                          data.authors.map(author => <option key={author.id} value={author.id}>{author.name}</option>)\r\n                        }\r\n                      </Fragment>\r\n                    }\r\n                  }\r\n                </Query>\r\n              </select>\r\n            </div>\r\n            <button>+</button>\r\n          </form>\r\n          )\r\n        }\r\n        </Mutation>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddBook\r\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\n\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Tuyen's Reading List</h1>\n        <BookList />\n        <AddBook />\n      </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}